AWSTemplateFormatVersion: 2010-09-09
Description: 'A CloudFormation template to form a VPC for our tutorial'
#Parameters:
#  OwnerName:
#    Description: 'The name of the owning engineer for the item'
#    Type: String
#    Default: 'Ernie Van Duyne'
Resources:
  # Virtual Private Network creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/19
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EVD-QA-VPC--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  # Now we create all the subnets needed  - DMZ, private and public.
  #   We create two of each - We want to use two availability zones to be redundant in case one zone goes down
  DMZSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 192.168.0.0/23
      Tags:
        - Key: Name
          Value: QA DMZ Subnet AZ-1a--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  DMZSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 192.168.2.0/23
      Tags:
        - Key: Name
          Value: QA DMZ Subnet AZ-1b--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  PublicSubnet1a:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1a
        VpcId: !Ref VPC
        CidrBlock: 192.168.4.0/23
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: QA Public Subnet AZ-1a--CF
          - Key: Owner
            Value: Ernie Van Duyne
          - Key: Environment
            Value: QA CloudFormation
  PublicSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 192.168.6.0/23
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: QA Public Subnet AZ-1b--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 192.168.8.0/23
      Tags:
        - Key: Name
          Value: QA Private Subnet AZ-1a--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  PrivateSubnet1b:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 192.168.10.0/23
      Tags:
        - Key: Name
          Value: QA Private Subnet AZ-1b--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: QA-Internet-Gateway--CF
        - Key: Owner
          Value: Ernie Van Duyne
        - Key: Environment
          Value: QA CloudFormation
  # Attach the Gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Main Route table creation
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: QA-RoutingTable--CF
  # Create a public route for the main route table linked to the internet gateway so the main table can reach the internet
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # DMZ Route table creation
  DMZRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: QA-DMZRouteTable--CF
  # Create a public route for the DMZ route table linked to the internet gateway so the DMZ table can reach the internet
  DMZPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DMZRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate the DMZ Subnets to the DMZ route table
  DMZSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DMZRouteTable
      SubnetId: !Ref DMZSubnet1a
  DMZSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DMZRouteTable
      SubnetId: !Ref DMZSubnet1b

  # Public Route table creation
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: QA-PublicRouteTable--CF
  # Create a public route for the public route table linked to the internet gateway so the public table can reach the internet
  PublicPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate the Public Subnets to the public route table
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1a
  PublicSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1b

  # Create Elastic IPs needed for NAT Gateways
  QANatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  QANatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  # Create NAT Gateways - associate them to a public subnet so they can reach the internet when needed
  NATGatewayAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt QANatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1a
      Tags:
        - Key: Name
          Value: QA-NAT_Gateway-AZ1--CF
  NATGatewayAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt QANatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet1b
      Tags:
        - Key: Name
          Value: QA-NAT_Gateway-AZ2--CF

  # Private Route table creation for availability zone 1
  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: QA-Private-RouteTable-AZ1--CF
  # Create a private route for the private route table linked to the NAT so the public table can reach the internet
  PrivateNATRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayAZ1
  PrivateSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateSubnet1a

  # Private Route table creation for availability zone 2
  PrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: QA-Private-RouteTable-AZ2--CF
  # Create a private route for the private route table linked to the NAT so the public table can reach the internet
  PrivateNATRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayAZ2
  PrivateSubnet1bRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      SubnetId: !Ref PrivateSubnet1b

# Create IAM Role and policy
  ## NOTE - you have to tell AWS that you are OK with creating an IAM by adding "--capabilities CAPABILITY_IAM" to the deploy command.
  QAEC2RoleCF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  myEC2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: QAEC2RoleCF
  myEC2RoleRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: QAs3BuildAccessPolicyCF
      PolicyDocument:
        Statement:
        - Effect: Allow
          #Action: "*"
          #Resource: "*"
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::qa-storage--dashboard/*
            - arn:aws:s3:::qa-storage--dashboard
      Roles:
      - Ref: QAEC2RoleCF

# Create a security group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 74.94.81.157/32
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

# Create an EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: 'udemy-ec2'
      ImageId: ami-035be7bafff33b6b6 # AMI us-east-1
      SecurityGroupIds:
        #- !GetAtt InstanceSecurityGroup.GroupId
        - !Ref InstanceSecurityGroup
      SubnetId:
        Ref: PublicSubnet1a
      IamInstanceProfile:
        Ref: myEC2RoleInstanceProfile
      Tags:
        - Key: Name
          Value: QA-EC2-ApplicationServer1-Zone1aâ€”CF
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - sudo su
              - yum update -y
              - yum install httpd php -y
              - cd /var/www/html
              - aws s3 cp s3://qa-storage--dashboard/builds/application_prod.zip application_prod.zip
              - unzip application_prod.zip
              - rm -rf application_prod.zip
              - sudo service httpd start
  #            - Fn::Join:
  #                - ''
  #                - - 'echo "<h2>Environment: '
  #                  - Ref: Environment
  #                  - </h2>" >> /var/www/index.html
  #            - Fn::Join:
  #                - ''
  #                - - 'echo "<h2>Role: '
  #                  - Ref: Role
  #                  - </h2>" >> /var/www/index.html
  #            - echo "</body></html>" >> /var/www/index.html

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: 'udemy-ec2'
      ImageId: ami-035be7bafff33b6b6 # AMI us-east-1
      SecurityGroupIds:
        #- !GetAtt InstanceSecurityGroup.GroupId
        - !Ref InstanceSecurityGroup
      SubnetId:
        Ref: PublicSubnet1b
      IamInstanceProfile:
        Ref: myEC2RoleInstanceProfile
      Tags:
        - Key: Name
          Value: QA-EC2-ApplicationServer1-Zone1bâ€”CF
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - sudo su
              - yum update -y
              - yum install httpd php -y
              - cd /var/www/html
              - aws s3 cp s3://qa-storage--dashboard/builds/application_prod.zip application_prod.zip
              - unzip application_prod.zip
              - rm -rf application_prod.zip
              - sudo service httpd start

# Good EC2 instance example
#  ServiceInstance:
#    Type: "AWS::EC2::Instance"
#    Properties:
#      InstanceType: !Ref InstanceType
#      IamInstanceProfile: !Ref InstanceProfile
#      UserData:
#        'Fn::Base64': !Sub |
#          #cloud-config
#          write_files:
#          - path: /etc/sysconfig/cloudformation
#            permissions: 0644
#            owner: root
#            content: |
#              STACK_NAME=${AWS::StackName}
#              AWS_REGION=${AWS::Region}
#          runcmd:
#          - aws s3 cp s3://${ArtifactsBucketName}/dd-get-secrets.py /home/ec2-user/dd-get-secrets.py
